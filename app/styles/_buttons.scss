/**
* stacked button group
* the idea is to create a module that wraps buttons and botton like objects
* so that they can be stacked vertically, aligned center, and the container
* object is as wide as the widest child.
* It's this last bit which is tough to do strictly in CSS, but it does seem
* to work when the .btn-group--stacked is a flex-child itself.
*/
.btn-group--stacked {
  @include display-flex;
  @include flex-direction(column);

  > .btn {
    margin-right: 0;
    margin-bottom: 10px; // should update with global _var
    text-align: center;

    &:last-child {
      margin-bottom: 0;
    }
  }

  > .dropdown > .btn {
    width: 100%;
  }
}

.btn--studio360-override {
  font-weight: 600 !important;
  max-width: 120px;

  > a {
    margin-top: 10px !important;
    font-family: "Open Sans", sans-serif !important;
    color: white !important;
    line-height: initial !important;
  }
}

/***
* Buttons:
*/

/**
 * Button:
 * `.btn`
 * A base for all buttons. Not much to look at.
 *
 *      @example
 *      button.btn Click Me
 */
@mixin btn {
  position: relative; // for transition icons
  display: inline-block;
  border-radius: 25px;
  border: 2px solid;
  border-color: rgba($lightgray, 0.2);

  padding: 0px 13px;
  color: $lightgray;
  background: transparent;
  @include fontsize(14);
  line-height: 34px;

  cursor: pointer;

  @include transition(
  opacity $transition-timing,
  background-color $transition-timing,
  border-color $transition-timing,
  color $transition-timing);

  &:hover,
  &:focus {
    border-color: rgba($darkgray, 0.2);
    color: $gray;
    opacity: 1;
  }

  &[disabled] {
    opacity: 0.15;
    cursor: not-allowed;
  }
}

.btn {
  @include btn;
}

/**
* Heavy Button:
* `.btn--heavy`
* Make the button bold.
*
*      @example
*      button.btn.btn--heavy Something to Emphasize
*/
.btn--heavy {
  font-weight: 600;
}

.btn--heavyborder {
  border-width: 2px;
}

/**
* Blank Button:
* `.btn--blank`
* An empty button. Useful for icons or interactive buttons
* to be style other ways
*
*      @example
*      button.btn.btn--blank I'm a button but I look like nothing special
*/
.btn--blank {
  padding: 0;
  border: 0;
  border-radius: 0;
  color: #333;
  // IE doesn't support initial
  color: initial;
  text-align: left;
  background-color: transparent;

  &:not([disabled]) {
    &:hover,
    &:focus {
      background: none;
      border: none;
      color: inherit;
    }
  }
}

/**
 * Large Button:
 * `.btn--large`
 * It's a little bigger than your standard button.
 *
 *      @example
 *      button.btn.btn--large Click Me, I'm Bigger!
 */
@mixin btn--large {
  padding: 3px 18px;
  line-height: 36px;
  @include fontsize(16);
}

.btn--large {
  @include btn--large;
}


/**
* Medium Button:
* `.btn--medium`
* It's a little mediumer than your standard button.
*
*      @example
*      button.btn.btn--medium Just Right.
*/
.btn--medium {
  padding: 0px 16px;
  line-height: 50px;
}

/**
* Small Button:
* `.btn--small`
* It's a little smaller than your standard button.
*
*      @example
*      button.btn.btn--small Can you see me? I'm small.
*/
.btn--small {
  padding: 0 5px;
  line-height: 20px;
}

/**
 * Circle Button:
 * `.btn--circle`
 * Good for icons.
 *
 *      @example
 *      button.btn.btn--circle
 *          i.fa.fa-twitter
 */
@mixin btn--circle {
  border-radius: 50%;
  width: 36px;
  height: 36px;
  padding: 0;
  text-align: center;
}

.btn--circle {
  @include btn--circle;
}

/**
 * Fat Button:
 * `.btn--fat`
 * When that small circle button is an important call to action.
 *
 *      @example
 *      button.btn.btn--circle.btn--fat
 *          i.fa.fa-twitter
 */
@mixin btn--fat {
  width: 40px;
  height: 40px;

  .fa {
    font-size: 18px;
  }
}

.btn--fat {
  @include btn--fat;
}

/**
* Squared Off Button:
* `.btn--squared`
* Squared off button with rounded corners.
*
*      @example
*      button.btn.btn--squared Submit
*/
.btn--squared {
  border-radius: 6px;
  padding: 0 8px;
}

/**
* Strict Square Button:
* `.btn--strictsquare`
* No rounded corners whatsoever.
*
*      @example
*      button.btn.btn--strictsquare Enter
*/
.btn--strictsquare {
  border-radius: 0;
}

/**
* Square Button:
* `.btn--square-small`
* A 45px width and height button.
*
*      @example
*      button.btn.btn--strictsquare.btn--square-small Hi
*/
.btn--square-small {
  width: 45px;
  height: 45px;
}

/**
* White Button:
* `.btn--white`
*
*      @example
*      .l-full(style="background-color: rgba(0,0,0,0.15)")
*          button.btn.btn--white Useful on a dark background
*/
@mixin btn--white {
  border-color: rgba(white, 0.2);
  color: white;

  &:not([disabled]) {
    &:hover,
    &:focus {
      color: white;
      border-color: rgba(white,.7);
    }
  }
}

.btn--white {
  @include btn--white
}

.btn--whitetext {
  color: white;
}


/**
* Pink Button:
* `.btn--pink`
* Make your button stand out with a pink background
*
*      @example
*      button.btn.btn--pink You Know You Want to Click
*/
.btn--pink {
  background-color: $pink;
  border-color: $pink;
  color: white;

  &:not([disabled]) {
    &:hover,
    &:focus {
        color: white;
    }
  }
}

/**
* Button with Pink Text:
* `.btn--pinktext`
* A regular button but the text is pink.
*
*      @example
*      button.btn.btn--pinktext Click Here
*/
.btn--pinktext {
  color: $pink;
}

/**
 * Blue Button:
 * `.btn--blue`
 *
 *      @example
 *      button.btn.btn--blue Click
 */
@mixin btn--blue {
  background-color: $blue;
  border-color: $blue;
  color: white;

  &:not([disabled]) {
    &:hover,
    &:focus {
      outline: none;
      background-color: $darkblue;
      border-color: $darkblue;
      color: white;
      opacity: 1;
    }
  }
}

.btn--blue {
  @include btn--blue;
}

/**
* Button with Blue Text:
* `.btn--bluetext`
* A regular button but the text is blue.
*
*      @example
*      button.btn.btn--bluetext Click Here
*/
.btn--bluetext {
  color: $blue;
}

/**
* Green Button:
* `.btn--green`
*
*      @example
*      button.btn.btn--green Click
*/
.btn--green {
  background-color: $lightgreen;
  border-color: $lightgreen;
  color: white;

  &:not([disabled]) {
    &:hover,
    &:focus {
      background-color: $darkgreen;
      border-color: $darkgreen;
      color: white;
    }
  }
}

/**
* Black Button:
* `.btn--black`
*
*      @example
*      button.btn.btn--black Click Here
*/
.btn--black {
  color: white;
  background-color: black;
  border-color: black;

  &:not([disabled]) {
    &:hover,
    &:focus {
      background-color: $pink;
      border-color: $pink;
      color: white;
    }
  }
}

/**
* Button with Black Text:
* `.btn--blacktext`
*
*      @example
*      button.btn.btn--blacktext Submit Comment
*/
.btn--blacktext {
  color: $darkergray;

  &:not([disabled]) {
    &:hover,
    &:focus {
      color: $pink;
    }

    &.active {
      color: black;
    }
  }
}

/**
* Red Button:
* `.btn--red`
* Make your button stand out with a red background
*
*      @example
*      button.btn.btn--red You Know You Want to Click
*/
.btn--red {
  background-color: $red;
  border-color: $red;
  color: white;

  &:not([disabled]) {
    &:hover {
      color: white;
    }
  }
}


@mixin btn--red {
  background-color: $red;
  border-color: $red;
  color: white;

  &:hover,
  &:focus {
    outline: none;
    background-color: $darkred;
    border-color: $darkred;
    color: white;
    opacity: 1;
  }
}


/**
* Media Query Buttons:
* Sometimes we need to change a button's colors based on the current MQ.
* These should be created according to special MQ cases.
*/

/**
* `.btn--mq-graywhite`
* Gray/White MQ Button
*
*      @example
*      button.btn.btn--mq-graywhite Gray at Narrow. White at wide.
*/
.btn--mq-graywhite {
  @include mq($medium-and-up) {
    color: white;
    border-color: rgba(white, 0.2);

    &:hover,
    &:focus {
      color: white;
      border-color: rgba(white, 0.7);
    }
  }
}

/**
* Button Link:
* `.btn--link`
* If you have you a button that should look
* like a regular link, use this modifier
*
*      @example
*      button.btn.btn--link Show Comments
*/
.btn--link {
  color: #333;
  background-color: transparent;
  border-radius: 0;
  border: none;
  border-bottom: 1px solid rgba(204,204,204,0.8);
  padding: 0;
  font-weight: normal;
  @include fontsize($base-font);
  line-height: #{$line-height}px;

  &:hover,
  &:focus {
    color: $blue;
    background-color: transparent;
    border-color: rgba(204,204,204,0.8);
  }
}

/**
* Button Link with Icon:
* If you've got a button that should look like a link,
* and you want to include an icon, you can add `.btn--linkicon`
* to the `<button>`, and wrap the link text in a span.
*
* Also include `.btn--icon` for proper spacing after the icon.
*
*      @example
*      button.btn.btn--icon.btn--link.btn--linkicon
*          i.fa.fa-comment
*          span 2 Comments
*/
.btn--linkicon {
  border: none;

  > span {
    border-bottom: 1px solid rgba(204,204,204,0.8);
  }

  // beta maybe later button
  &.btn--white {
    > span {
      border-color: rgba(white, 0);
      color: white;
    }

    &:hover,
    &:focus {
      > span {
        color: white;
        border-color: rgba(white, 1);
      }
    }

    &:active {
      opacity: 0.60;
    }

    @include transition(opacity 125ms ease, border-color 125ms ease);
  }
}

/**
* Button Group:
* Group some buttons together and they will line up nicely
*
*      @example
*      .btn-group
*          button.btn.btn--large Listen
*          button.btn Queue
*          button.btn.btn--circle
*              i.fa.fa-ellipsis-h
*/
.btn-group {
  font-size: 0;

  > * {
    margin-right: 10px;
    vertical-align: middle;
    display: inline-block;
  }

  > :last-child {
    margin-right: 0;
  }
}

.btn-group--withvr {

  > * {
    @extend %vertical-rhythm;

    @include mq($medium-and-up) {
      margin-bottom: 0;
    }
  }
}

.btn-group--closer {
  > * {
    margin-right: 7px;
  }
}

// bump specificity to override
// .flag-body>:last-child setting
// margin-bottom to 0
.btn-group.btn-group--storytease {
  margin-bottom: -1.5rem;
  > * {
    margin-bottom: 1.5rem;
  }
}

.btn-group--storyheader {
  @include mq($medium-and-up) {
    margin-bottom: -1.5rem;
    > * {
      margin-bottom: 1.5rem;
    }
  }
}

/**
* Toggle Button:
* `.btn--toggle > .btn-togglecontent`
* When a button has content you want to want to toggle on clicks, use these
* classes. They can applied directly to buttons used for other purposes
* such as accordions or tabs and will not interrupt functionality.
*
* The important thing is to add a data-state attribute set to either `first` or
* `second`. This corresponds to which child will be displayed by default.
*
* Requires `js/overhaul/main.js` but should probably split into its own mod.
*
*      @example
*      button.btn.btn--toggle.js-toggleButton(data-state="first")
*          .btn-togglecontent Toggle State 1
*          .btn-togglecontent Toggle State 2
*/
.btn--toggle {
  position: relative;
  // override base `.btn` transition so there is no
  // conflict with the btn-togglecontent transitions
  //@include transition(none);
}

.btn-togglecontent {
  @include transition(all 150ms ease);

  &:first-child {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
}

.btn--block {
  display: block;
  padding: 8px;
  width: 100%;
}

@mixin btn--smalltext {
  @include fontsize(12);
}

.btn--smalltext {
  @include btn--smalltext;
}

.btn--bigtext {
  @include fontsize(20);
}

.btn--upper {
  text-transform: uppercase;
}

@mixin btn--strongtext {
  font-weight: 600;
}

.btn--strongtext {
  @include btn--strongtext;
}

@mixin thickbtn {
  border-width: 2px;

  &.btn--white {
    border-color: white;
    background-color: rgba(white, 0);

    &:hover,
    &:focus {
      border-color: white;
      background-color: rgba(white, 0.15);
    }

    &:active {
      opacity: 0.60;
    }
  }
}

.thickbtn {
  @include thickbtn;
}

// sometimes you need to manually control an element's
// hover state with javascript because of weird
// animaton/ember/liquid-fire stuff
@mixin js-hover($props: (), $base: (), $hover: ()) {
  @each $prop, $value in zip($props, $base) {
    #{$prop}: #{$value};
  }
  // override the :hover pseudo-class to match the base state
  &:hover {
     @each $prop, $value in zip($props, $base) {
      #{$prop}: #{$value};
    }
  }
  // hover state will be controlled manually in javascript with .is-hovering class
  // focus state for these buttons should match hover state
  &.is-hovering,
  &:focus {
    @each $prop, $value in zip($props, $hover) {
      #{$prop}: #{$value};
    }
  }
}

@mixin gray-btn-jshover {
  @include js-hover(
    $props:  (color,       border-color),
    $base:   ($darkergray, rgba($lightgray, 0.2)),
    $hover:  ($darkergray, rgba($darkgray, 0.3))
  );
}

@mixin white-btn-jshover {
  @include js-hover(
    $props:  (color, border-color),
    $base:   (white, rgba($lightgray, 0.6)),
    $hover:  (white, white)
  );
}

@mixin blue-btn-jshover {
  @include js-hover(
    $props:  (background-color, border-color),
    $base:   ($blue, $blue),
    $hover:  ($darkblue, $darkblue)
  );
}

@mixin red-btn-jshover {
  @include js-hover(
    $props:  (background-color, border-color),
    $base:   ($red, $red),
    $hover:  ($darkred, $darkred)
  );
}

@mixin listen-btn-transitions {
  white-space: nowrap; // helps transitions

  @include transition(
    width 200ms cubic-bezier(0.17, 0.89, 0.39, 1.25),
    opacity $transition-timing,
    background-color $transition-timing,
    border-color $transition-timing,
    color $transition-timing);

  &.is-loading,
  &.is-playing {
    @include transition(
      width 200ms cubic-bezier(1, 0, 0, 1),
      opacity $transition-timing,
      background-color $transition-timing,
      border-color $transition-timing,
      color $transition-timing);
  }
}


.callout-button {
  @include btn;
  @include btn--large;
  @include btn--strongtext;
  @include thickbtn;
  @include btn--white;
  white-space: nowrap;
  height: 46px;
}

.account-form-btn {
  @include btn;
  @include btn--large;
  @include btn--blue;
  @include btn--strongtext;
  white-space: nowrap;
  text-align: center;
  height: 46px;
  width: 100%;
}

.fb-btn {
  background-color: $facebook-purple;
  border-color: $facebook-purple;
  color: white;

  &:not([disabled]) {
    &:hover,
    &:focus {
      outline: none;
      color: white;
      border-color: #2b457c;
      background-color: #2b457c;
    }
  }
}

@mixin svg-color($color) {
  polygon, rect, circle, path {
    color: $color;
    fill: currentColor;
  }
}

@mixin gray-hollow-svg($color) {
  svg .outer {
    fill: rgba($lightgray, 0.2);
  }
  svg .inner {
    fill: $color;
  }  
}

@mixin gray-hollow-svg-hover($color) {
  svg .outer {
    fill: rgba($darkgray, 0.2);
  }
  svg .inner {
    fill: rgba($color, 1);
  }  
}

@mixin gray-svg {
  @include svg-color($lightgray);
}

@mixin darkergray-svg {
  @include svg-color($darkergray);
}

@mixin white-svg {
  @include svg-color(white);
}

@mixin blue-svg {
  @include svg-color($blue);
}

@mixin btn-wide {
  @include btn;
  @include btn--strongtext;
  @include listen-btn-transitions;

  overflow: hidden;

  &.is-loading,
  &.is-playing {
    padding-left: 0;
    padding-right: 0;
  }

  .listen-ui {
    width: 18px;
    margin-right: 2px;

    > svg {
      width: 13px;
    }
  }
}

@mixin btn-boss {
  @include btn-wide;
  @include btn--large;

  padding-left: 13px;
}

@mixin btn-minion {
  @include btn-wide;

  .listen-ui {
    @include scale(0.8, 0.8);

    margin-right: 0px;
  }
}

@mixin btn-minion-hollow {
  @include btn-wide;
  @include btn--large;
  @include thickbtn;

  .listen-ui {
    > svg {
      width: 13px;
    }
  }
}

@mixin btn-size($size) {
  width: $size;
  height: $size;

  .listen-ui {
    width: $size;
    height: $size;

    > svg {
      width: $size;
      height: $size;
    }
  }
}

@mixin white-listen-spinner {
  .listen-spinner {
    @include spinner(
      $primary: rgba(white, 0),
      $accent: white
    );
  }
}

@mixin transparent-listen-spinner {
  .listen-spinner {
    @include spinner(
      $primary: rgba(white, 0),
      $accent: rgba(white, 0.2)
    );
  }
}

@mixin blue-listen-spinner {
  .listen-spinner {
    @include spinner(
      $primary: rgba(white, 0),
      $accent: $blue
    );
  }
}

@mixin red-listen-spinner {
  .listen-spinner {
    @include spinner(
      $primary: rgba(white, 0),
      $accent: $red
    );
  }
}

// Queue Buttons

.queue-button {
  @include btn;
  @include btn--strongtext;
  @include btn--smalltext;
  @include thickbtn;

  &.queue-button--fancyfeature {
    @include gray-btn-jshover;

    @include mq($small-and-up) {
      @include white-btn-jshover;
    }
  }

  &.queue-button--storyheader {
    @include gray-btn-jshover;

    @include mq($medium-and-up) {
      @include white-btn-jshover;
    }
  }

  &.just-gray {
    @include gray-btn-jshover;
  }

  &.small-blue {
    @include btn-size(44px);

    &:focus,
    &:hover {
      border-color: rgba($darkgray, 0.2);
      color: $lightgray;
      opacity: 1;
    }

    &.is-hovering {
      border-color: rgba($darkgray, 0.2);
      color: $lightgray;
      opacity: 1;
    }
  }
}

// Listen Buttons

.listen-button {
  position: relative;

  .l-holygrail-right > & {
    @include align-self(center);
  }

  &.blue-boss {
    @include btn-boss;

    @include btn--blue;
    @include blue-btn-jshover;
    @include white-listen-spinner;
    @include white-svg;
  }

  &.blue-minion {
    @include btn-minion;

    @include btn--blue;
    @include blue-btn-jshover;
    @include white-listen-spinner;
    @include white-svg;
  }

  &.red-minion {
    @include btn-minion;

    @include btn--red;
    @include red-btn-jshover;
    @include white-listen-spinner;
    @include white-svg;
  }

  &.gray-minion {
    @include btn-minion-hollow;

    @include gray-btn-jshover;
    @include blue-listen-spinner;
    @include darkergray-svg;
  }

  &.blue-hollow {
    @include btn-size(44px);

    @include gray-hollow-svg($blue);
    @include blue-listen-spinner;

    &:hover .listen-ui,
    &:focus .listen-ui {
      @include gray-hollow-svg-hover($blue);
    }
    &:active .listen-ui {
      @include gray-hollow-svg($gray);
    }
  }

  &.white-hollow {
    @include btn-size(48px);
    @include mq($medium-and-up) {
      @include btn-size(55px);
    }

    @include white-svg;
    @include transparent-listen-spinner;

    &:hover .listen-ui,
    &:focus .listen-ui {
      @include svg-color(#ccc);
    }
    &:active .listen-ui {
      @include blue-svg;
    }
  }

  &.white-hollow-small {
    @include btn-size(24px);

    @include white-svg;
    @include transparent-listen-spinner;

    &:hover .listen-ui,
    &:focus .listen-ui,
    &:active .listen-ui {
      opacity: 0.8;
    }
  }

  &.red-hollow-small {
    @include btn-size(24px);

    @include gray-hollow-svg($red);
    @include red-listen-spinner;

    &:hover .listen-ui,
    &:focus .listen-ui,
    &:active .listen-ui {
      @include gray-hollow-svg-hover($red);
    }
  }

  &.blue-circle {
    @include btn;
    @include btn--circle;
    @include btn--fat;
    @include listen-btn-transitions;

    .listen-ui {
      width: 18px;
      @include scale(0.8, 0.8);

      > svg {
        width: 18px;
      }
    }

    .icon--play {
      left: 2px; //center play button in small circles
    }

    @include btn--blue;
    @include white-svg;
    @include white-listen-spinner;
  }


  .listen-ui {
    display: inline-block;
    position: relative;

    > svg {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      margin: auto;
      @include transition(opacity 0.3s ease-in-out, fill 0.2s ease-in-out);
    }

    .icon--pause,
    .listen-spinner,
    .listen-spinner:after,
    .listen-spinner:before {
      opacity: 0;
    }
  }

  &.is-loading .listen-ui {
    width: 100%;

    .listen-spinner,
    .listen-spinner:after,
    .listen-spinner:before {
      opacity: 1;
    }

    .icon--pause,
    .icon--play {
      opacity: 0;
    }
  }

  &.is-playing .listen-ui {
    width: 100%;

    .icon--pause {
      opacity: 1;
    }

    .icon--play,
    .listen-spinner,
    .listen-spinner:after,
    .listen-spinner:before {
      opacity: 0;
    }
  }

  .listen-spinner,
  .listen-spinner:after,
  .listen-spinner:before {
    display: inline-block;
    @include transition(opacity 150ms ease);
  }
}
